[tox]
envlist = py{310}, pytest-fast, lint, mypy

# Define the common dependencies
# and configuration for all environments
[common]
deps = 
    .[dev,test]

[testenv]
description = Set up the environment with dependencies from pyproject.toml
requires = tox>=4.0
package = wheel
deps = 
    {[common]deps}
commands =
    {envpython} -m pytest --cov=module1 --cov=module2 {posargs:tests/unit_tests}

# alias to default testenv
[testenv:pytest]
description = "Run tests with pytest."
deps = {[common]deps}
commands = {[testenv]commands}

[testenv:pytest-fast]
description = "Run tests in parallel with pytest-xdist to speed up test execution time."
deps = {[common]deps}
commands = 
    {envpython} -n auto -m "not hypothesis_slow" -m "not serial" --cov=module1 --cov=module2 {posargs:tests/unit_tests}

[testenv:integration-tests]
description = "Run integration tests with pytest."
deps = {[common]deps}
commands = 
    {envpython} -m pytest --cov=module1 --cov=module2 {posargs:tests/integration_tests}

[testenv:integration-tests-fast]
description = "Run integration tests in parallel with pytest-xdist to speed up test execution time."
deps = {[common]deps}
commands = 
    {envpython} -n auto -m "not hypothesis_slow" -m "not serial" --cov=module1 --cov=module2 {posargs:tests/integration_tests}

[testenv:lint]
deps = {[common]deps}
description = "Checks linting against Python files"
commands = 
    {envpython} -m ruff check -- .

[testenv:fix]
deps = {[common]deps}
description = "Automatically formats and fixes any auto-fixable linting errors"
commands = 
    {envpython} -m ruff format -- .
    {envpython} -m ruff check --fix .

[testenv:fix-unsafe]
description = "Automatically formats and fixes any auto-fixable and unsafe linting errors"
deps = {[common]deps}
commands = 
    {envpython} -m ruff format -- .
    {envpython} -m ruff check --fix --unsafe-fixes .

[testenv:mypy]
description = "Run mypy static type checking"
deps = {[common]deps}
commands = 
    {envpython} -m mypy module1/ module2/ tests/

[testenv:coverage-html]
description = "Generate HTML coverage report from the most recent pytest run"
deps = {[common]deps}
commands = coverage html -i

[testenv:coverage-report]
description = "Print coverage report table from the most recent pytest run to the terminal"
deps = {[common]deps}
commands = coverage report -i