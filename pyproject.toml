################################# Project metadata ##############################

[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "PROJECT_NAME"
version = "0.0.0"
description = "PROJECT_DESCRIPTION_GOES_HERE"
authors = [
    { name="a-dubs", email="alecwarren19@gmail.com" },
]
readme = "README.md"
license = { file="LICENSE" }
requires-python = ">=3.8"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
]

################################ Dependencies #################################
dependencies = [
    "diskcache",
    "pymongo",
    "python-dotenv",
    "requests",
    "pydantic",
    "jinja2",
]

############################# Optional dependencies ###########################

# dependencies that are only needed for development
[project.optional-dependencies]
dev = [
    "ruff",
    "mypy",
    "tox-uv",
]
# dependencies that are only needed for testing
test = [
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "pytest-xdist",
]

############################# Setuptools configuration #########################

[tool.setuptools]
packages = ["module1", "module2"]

[project.scripts]
# Entry points for the package
# command_1 = "module1.submodule:function_name"
# command_2 = "module2.submodule:function_name"


############################# Mypy configuration ##############################

[tool.mypy]
follow_imports = "silent"  # Suppress import errors
warn_unused_ignores = "true"  # Warn about unused ignore comments
warn_redundant_casts = "true"  # Warn about redundant casts
no_implicit_optional = "true"  # Disallow implicit optional types
check_untyped_defs = "true"  # Check for missing type annotations in function definitions
warn_return_any = "true"  # Warn if the return type is Any
# Exclude specific files or directories from mypy checks
exclude=[

]

[[tool.mypy.overrides]]
# add any files/dirs here that need to have type annotations added
# and then remove them from this list once they have type annotation added later
module = [

]
check_untyped_defs = false

[[tool.mypy.overrides]]
# add any dependencies that cause mypy issues here
module = [

]
ignore_missing_imports = true
no_implicit_optional = true

############################# Ruff configuration ##############################

[tool.ruff]
line-length = 120
target-version = "py38" 
preview = true  # use rules that are "unstable and in preview"
exclude = []  # files to exclude from linting

[tool.ruff.lint]

# Explicitly enable these ruff rules. See https://docs.astral.sh/ruff/rules/
select = [

# Mandatory rules to adhere to (minimal effort but high impact)
  "E2", # E2xx: Pycodestyle formatting issues
  "E4", # E4xx: Pycodestyle import-related errors
  "E7", # E7xx: Pycodestyle syntax errors
  "E9", # E9xx: Pycodestyle indentation errors
  "F",  # Fxxx: Pyflakes checks (undefined names, unused imports)
  "W",  # Wxxx: Pycodestyle warnings (whitespace issues)
  "PLE", # PLExxx: Pylint errors
  "PLW", # PLWxxx: Pylint warnings

# OPTIONAL: Enable pylint rules which are much more strict than the default ruff rules 
#   "PLC", # PLCxxx: Pylint conventions 
#   "PLR", # PLCxxx: Pylint refactoring suggestions

# OPTIONAL: Enable flake8 plugins for suggestions to reduce potential bugs and security issues
#   "B",  # Bxxx: Bugs and design issues (from `flake8-bugbear`)
#   "S",  # Sxxx: Security issues (from `flake8-bandit`)

]

ignore = [
  # Any specific ruff rules to ignore (e.g. "PLW2901"). See https://docs.astral.sh/ruff/rules/
]

############################ Pytest configuration #############################

# set test paths
[tool.pytest.ini_options]
testpaths = ["tests/unit_tests"]
markers = [
    # "example_marker: mark a test as an example",
]